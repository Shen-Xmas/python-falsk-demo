################################
#                              #
#       关键信息解析           #
#                              #
################################
#  日志格式
#  %(levelno)s:     日志级别的数值
#  %(levelname)s:   日志级别名称
#  %(pathname)s:    当前执行程序的路径，其实就是sys.argv[0]
#  %(filename)s:    当前执行程序名
#  %(funcName)s:    日志的当前函数
#  %(lineno)d:      日志的当前行号
#  %(asctime)s:     日志的时间
#  %(thread)d:      线程ID
#  %(threadName)s:  线程名称
#  %(process)d:     进程ID
#  %(message)s:     事件信息

#  日志级别
#  debug	    最详细的日志信息，典型应用场景是 问题诊断
#  info	        信息详细程度仅次于debug，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作
#  warning	    当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的
#  error	    由于一个更严重的问题导致某些功能不能正常运行时记录的信息
#  critical	    当发生严重错误，导致应用程序不能继续运行时记录的信息

version: 2
root:
  # 文件日志类头
  root_handler: logging.getLogger
  # 日志输出级别
  root_level: debug
  # 日志文件编码格式
  encoding: utf-8
  # 加入sys.stdout后，即为标准日志输出，默认是sys.stderr
  stream: sys.stdout

console:
  # 流日志头
  console_handler: logging.StreamHandler
  # 日志输出格式
  # console_formatter: "%(asctime)s - [PID-%(process)d] - [Thread-%(thread)d] - [%(levelname)s] - %(message)s - <%(funcName)s> - [Line-%(lineno)d] - %(filename)s"
  console_formatter: "%(asctime)s - [%(levelname)s] - %(message)s - <%(funcName)s> - [Line-%(lineno)d] - %(filename)s"
  # 日志输出级别
  console_level: debug
  # True时, 控制台输出日志; False, 控制台不输出日志
  stdout: True


file:
  # 存储的日志文件名，默认名为 app.log
  file_log: app.log
  # 文件日志类头
  file_handler: logging.handlers.RotatingFileHandler
  # 日志输出格式
  file_formatter: "%(asctime)s - [PID-%(process)d] - [Thread-%(thread)d] - [%(levelname)s] - %(message)s - <%(funcName)s> - [Line-%(lineno)d] - %(filename)s"
  # 日志输出级别
  file_level: debug
  # 为每个日志文件大小，这里给的是10M
  max_bytes: 10485760
  # 是备份文件个数，如果超过这个个数，就会自动覆盖
  back_count: 9